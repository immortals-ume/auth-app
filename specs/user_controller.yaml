openapi: 3.1.0
info:
  title: User Controller API
  description: User management operations including registration, profile management, and password operations.
  version: "1.0.0"
  contact:
    name: Immortals Team

servers:
  - url: /api/v1/users
    description: User Management API server

paths:
  /register:
    post:
      summary: Register New User
      operationId: register
      description: Registers a new user account.
      tags: [ User Management ]
      security:
        - GuestAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /{username}:
    get:
      summary: Get User by Username
      operationId: getUser
      description: Retrieves user information by username.
      tags: [ User Management ]
      security:
        - AdminAuth: [ ]
        - UserAuth: [ READ ]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username to retrieve
      responses:
        '201':
          description: User information retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

  /change-password-email/{username}:
    post:
      summary: Send Change Password Email
      operationId: sendChangePasswordEmail
      description: Sends a password change email to the specified user.
      tags: [ User Management ]
      security:
        - AdminAuth: [ ]
        - UserAuth: [ SEND_EMAIL ]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username to send password reset email
      responses:
        '200':
          description: Password change email sent successfully.
          content:
            application/json:
              schema:
                type: string
                example: "Password reset email sent successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

  /change-password:
    patch:
      summary: Change Password
      operationId: changePassword
      description: Changes user password using reset credentials.
      tags: [ User Management ]
      security:
        - AdminAuth: [ ]
        - UserAuth: [ UPDATE ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetCredentials'
      responses:
        '200':
          description: Password changed successfully.
          content:
            application/json:
              schema:
                type: string
                example: "Password changed successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /address:
    patch:
      summary: Update User Address
      operationId: updateAddress
      description: Updates or adds user address information for the authenticated user.
      tags: [ User Management ]
      security:
        - AdminAuth: [ ]
        - UserAuth: [ UPDATE, CREATE ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressDTO'
      responses:
        '200':
          description: Address updated successfully.
          content:
            application/json:
              schema:
                type: string
                description: JSON string representation of updated address
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    GuestAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Requires a Bearer token with GUEST role.

    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Requires a Bearer token with ADMIN role.

    UserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Requires a Bearer token with ROLE_USER and specific authorities.

  schemas:
    RegisterRequestDTO:
      type: object
      properties:
        username:
          type: string
          example: "newuser"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
      required:
        - username
        - email
        - password

    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        createdAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ResetCredentials:
      type: object
      properties:
        token:
          type: string
          description: Password reset token
        newPassword:
          type: string
          format: password
        confirmPassword:
          type: string
          format: password
      required:
        - token
        - newPassword
        - confirmPassword

    UserAddressDTO:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        zipCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "USA"
      required:
        - street
        - city
        - zipCode

    ApiErrorResponse:
      type: object
      properties:
        httpStatus:
          type: string
          description: HTTP status code as a string
        timeStamp:
          type: string
          format: date-time
        moreInfo:
          type: string
        errorCode:
          type: integer
        errorMessage:
          type: string
        errors:
          type: array
          items:
            type: string

  responses:
    BadRequest:
      description: Bad request - validation error or invalid input.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'

    Unauthorized:
      description: Unauthorized - authentication required.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'

    Forbidden:
      description: Forbidden - insufficient permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'

    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'

tags:
  - name: User Management
    description: User management operations