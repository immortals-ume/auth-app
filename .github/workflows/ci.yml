name: CI Pipeline

on:
  push:
    branches: [ master ,develop ]
  pull_request:
    branches: [ master, develop, Feature_* ]

env:
  JAVA_VERSION: '17'
  DOCKER_IMAGE_NAME: 'auth-app'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  setup-java:
    name: ☕ Set up Java & Checkout
    runs-on: ubuntu-latest
    outputs:
      java-version: ${{ steps.export-version.outputs.java_version }}
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: 🔧 Export Java Version
        id: export-version
        run: echo "java_version=${{ env.JAVA_VERSION }}" >> "$GITHUB_OUTPUT"

  cache-dependencies:
    name: 💾 Cache Maven Dependencies
    runs-on: ubuntu-latest
    needs: setup-java
    steps:
      - uses: actions/checkout@v4

      - name: 💾 Cache ~/.m2
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔨 Maven Build
        run: mvn clean install

      - name: 📄 Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/

  dockerize-and-release:
    name: 🚀 Dockerize, Version Bump, Tag, Release
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🛠 Bump Patch Version in pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          NEW_VERSION=$(echo $VERSION | awk -F. '{$NF += 1; OFS="."; print}')
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 🔁 Commit Version Bump
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add pom.xml
          git commit -m "chore(release): bump version to ${{ env.VERSION }}"
          git push origin HEAD:${{ github.ref_name }}

      - name: 🔖 Create Git Tag
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: 🔐 Docker Login to GHCR
        uses: docker/login-action@v4
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PUSH_PASSWORD_TOKEN }}

      - name: 🐳 Build Docker Image
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
          docker build -t $IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: 📦 Push Docker Image
        run: docker push ${{ env.IMAGE_TAG }}

      - name: 🧾 Generate Changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "changelog=$(git log --pretty=format:'- %s' --no-merges)" >> $GITHUB_OUTPUT
          else
            echo "changelog=$(git log $LAST_TAG..HEAD --pretty=format:'- %s' --no-merges)" >> $GITHUB_OUTPUT
          fi
