name: CI Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop, Feature_*]

env:
  JAVA_VERSION: '17'
  DOCKER_IMAGE_NAME: 'auth-app'

jobs:
  setup-java:
    name: ☕ Set up Java & Checkout
    runs-on: ubuntu-latest
    outputs:
      java-version: ${{ steps.export-version.outputs.java_version }}
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: 🔧 Export Java Version
        id: export-version
        run: echo "java_version=${{ env.JAVA_VERSION }}" >> "$GITHUB_OUTPUT"

  cache-dependencies:
    name: 💾 Cache Maven Dependencies
    runs-on: ubuntu-latest
    needs: setup-java
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 💾 Cache ~/.m2
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: cache-dependencies
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: 🔨 Maven Build
        run: mvn clean install

      - name: 📄 Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/

  dockerize-and-release:
    name: 🚀 Dockerize, Version Bump, Tag, Release
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔖 Generate Version
        id: version
        run: |
          VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔖 Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PUSH_PASSWORD_TOKEN }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧾 Generate Changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:'- %s' --no-merges | head -20)
          else
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:'- %s' --no-merges)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📦 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
            
            **Docker Image:** `ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}`
          draft: false
          prerelease: false